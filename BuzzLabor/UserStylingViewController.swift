//
//  UserStylingViewController.swift
//  BuzzLabor
//
//  Created by Jay Balderas on 6/3/17.
//  Copyright Â© 2017 Jay Balderas. All rights reserved.
//
//  Generated by PaintCode Plugin for Sketch
//  http://www.paintcodeapp.com/sketch
//

import UIKit



class UserStylingViewController: NSObject {
    
    
    //MARK: - Canvas Drawings
    
    /// Buzz Labor Design Draft
    
    class func drawSigninsignUp2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
//        / 03
//         Warning: Image layers are not supported.
//        / Rectangle 2
        let rectangle2 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 253, height: 34), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 81, y: 469)
        UIColor(white: 0.847, alpha: 0.53).setFill()
        rectangle2.fill()
        context.saveGState()
        rectangle2.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle2.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle2.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Username
        let username = NSMutableAttributedString(string: "Username")
        username.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 18)!, range: NSRange(location: 0, length: username.length))
        username.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: username.length))
        context.saveGState()
        username.draw(at: CGPoint(x: 89, y: 474))
        context.restoreGState()
        /// Rectangle 2 Copy
        let rectangle2Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 253, height: 34), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 81, y: 510)
        UIColor(white: 0.847, alpha: 0.43).setFill()
        rectangle2Copy.fill()
        context.saveGState()
        rectangle2Copy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle2Copy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle2Copy.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Password
        let password = NSMutableAttributedString(string: "Password")
        password.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 18)!, range: NSRange(location: 0, length: password.length))
        password.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: password.length))
        context.saveGState()
        password.draw(at: CGPoint(x: 89, y: 515))
        context.restoreGState()
        /// Buzz Labor
        let buzzLabor = NSMutableAttributedString(string: "Buzz Labor")
        buzzLabor.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 36)!, range: NSRange(location: 0, length: buzzLabor.length))
        buzzLabor.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: buzzLabor.length))
        context.saveGState()
        buzzLabor.draw(at: CGPoint(x: 99, y: 212))
        context.restoreGState()
        /// Rectangle
        let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 254, height: 49), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 80, y: 566)
        UIColor(hue: 0.495, saturation: 0.765, brightness: 0.385, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 0
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(hue: 0.495, saturation: 0.44, brightness: 0.861, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Sign in
        let signIn = NSMutableAttributedString(string: "Sign in")
        signIn.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Light", size: 24)!, range: NSRange(location: 0, length: signIn.length))
        signIn.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: signIn.length))
        context.saveGState()
        signIn.draw(at: CGPoint(x: 172, y: 574))
        context.restoreGState()
        /// Sign up
        let signUp = NSMutableAttributedString(string: "Sign up")
        signUp.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Light", size: 24)!, range: NSRange(location: 0, length: signUp.length))
        signUp.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.492, saturation: 0.735, brightness: 0.314, alpha: 1), range: NSRange(location: 0, length: signUp.length))
        context.saveGState()
        signUp.draw(at: CGPoint(x: 167, y: 625))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawEnRoute(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// 03
        // Warning: Image layers are not supported.
        /// 03 copy
        // Warning: Image layers are not supported.
        /// blurr
        let blurr = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 422, height: 1282), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: 0, y: 4)
        // Warning: Blur effects are not supported.
        context.restoreGState()
        /// tabbar navi
        do {
            context.saveGState()
            context.translateBy(x: 0, y: 638)
            
            /// tabbar-bg
            let tabbarbg = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422, height: 98))
            context.saveGState()
            context.saveGState()
            context.beginPath()
            context.addPath(tabbarbg.cgPath)
            context.addRect(tabbarbg.bounds.insetBy(dx: -10, dy: -12))
            context.clip(using: .evenOdd)
            context.translateBy(x: -433, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 433, y: 2)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 10 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
            }
            UIColor.black.setFill()
            tabbarbg.fill()
            context.restoreGState()
            UIColor.white.setFill()
            tabbarbg.fill()
            context.restoreGState()
            
            /// Rectangle
            let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 140, height: 29), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 42, y: 51)
            UIColor(hue: 0.494, saturation: 0.667, brightness: 0.506, alpha: 1).setFill()
            rectangle.fill()
            context.saveGState()
            rectangle.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Contact
            let contact = NSMutableAttributedString(string: "Contact")
            contact.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSDisplay", size: 21)!, range: NSRange(location: 0, length: contact.length))
            contact.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: contact.length))
            contact.addAttribute(NSKernAttributeName, value: -0.4, range: NSRange(location: 0, length: contact.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                contact.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: contact.length))
            }
            context.saveGState()
            contact.draw(in: CGRect(x: 73, y: 55, width: 79, height: 18))
            context.restoreGState()
            
            context.restoreGState()
        }
        /// 15min (estimated)
        let _15minEstimated = NSMutableAttributedString(string: "15min (estimated)")
        _15minEstimated.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSDisplay", size: 21)!, range: NSRange(location: 0, length: _15minEstimated.length))
        _15minEstimated.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.906, saturation: 0, brightness: 0.504, alpha: 1), range: NSRange(location: 6, length: 11))
        _15minEstimated.addAttribute(NSKernAttributeName, value: -0.4, range: NSRange(location: 0, length: _15minEstimated.length))
        context.saveGState()
        _15minEstimated.draw(at: CGPoint(x: 35, y: 652))
        context.restoreGState()
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSDisplay", size: 24)!, range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.69, saturation: 0.162, brightness: 0.182, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(NSKernAttributeName, value: -0.4, range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(at: CGPoint(x: 207, y: 645))
        context.restoreGState()
        /// Screenshot 2017-06-03 15.25.29
        // Warning: Image layers are not supported.
        /// track
        do {
            context.saveGState()
            context.translateBy(x: 229.4, y: 286.5)
            context.rotate(by: 424 * CGFloat.pi/180)
            context.translateBy(x: -134, y: -112.5)
            
            /// Path 2
            let path2 = UIBezierPath()
            path2.move(to: CGPoint.zero)
            path2.addLine(to: CGPoint(x: 118.44, y: 43.69))
            path2.addLine(to: CGPoint(x: 124.09, y: 67.51))
            path2.addLine(to: CGPoint(x: 64.23, y: 70.77))
            path2.addLine(to: CGPoint(x: 33.01, y: 156.29))
            path2.addLine(to: CGPoint(x: 94.12, y: 164.97))
            context.saveGState()
            context.translateBy(x: 143.44, y: 47.6)
            path2.lineJoinStyle = .round
            path2.lineCapStyle = .round
            path2.setLineDash([2, 9], count: 2, phase: 0)
            path2.lineWidth = 3
            UIColor(hue: 0.072, saturation: 0.763, brightness: 0.945, alpha: 1).setStroke()
            path2.stroke()
            context.restoreGState()
            
            /// Path 2 Copy
            let path2Copy = UIBezierPath()
            path2Copy.move(to: CGPoint.zero)
            path2Copy.addLine(to: CGPoint(x: 116.91, y: 43.13))
            path2Copy.addLine(to: CGPoint(x: 122.56, y: 66.94))
            path2Copy.addLine(to: CGPoint(x: 62.71, y: 70.21))
            path2Copy.addLine(to: CGPoint(x: 31.49, y: 155.72))
            context.saveGState()
            context.translateBy(x: 144.97, y: 48.17)
            path2Copy.lineJoinStyle = .round
            path2Copy.lineCapStyle = .round
            path2Copy.lineWidth = 3
            UIColor(hue: 0.072, saturation: 0.763, brightness: 0.945, alpha: 1).setStroke()
            path2Copy.stroke()
            context.restoreGState()
            
            /// Path 3
            let path3 = UIBezierPath()
            path3.move(to: CGPoint(x: 146.34, y: 47.26))
            path3.addLine(to: CGPoint(x: 55.32, y: 16.26))
            path3.addLine(to: CGPoint(x: 43.36, y: 22.07))
            path3.addLine(to: CGPoint.zero)
            context.saveGState()
            context.setAlpha(0.42)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 0.45, y: 0.21)
                path3.lineJoinStyle = .round
                path3.lineCapStyle = .round
                path3.setLineDash([2, 9], count: 2, phase: 0)
                path3.lineWidth = 3
                UIColor(hue: 0.685, saturation: 0.167, brightness: 0.438, alpha: 1).setStroke()
                path3.stroke()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// myself
            do {
                context.saveGState()
                context.translateBy(x: 133.98, y: 36.93)
                
                /// pin-bg
                let pinbg = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 20.61, height: 20.61))
                context.saveGState()
                context.saveGState()
                context.beginPath()
                context.addPath(pinbg.cgPath)
                context.addRect(pinbg.bounds.insetBy(dx: -5, dy: -9))
                context.clip(using: .evenOdd)
                context.translateBy(x: -26.61, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 26.61, y: 4)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 5 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.23).cgColor)
                }
                UIColor.black.setFill()
                pinbg.fill()
                context.restoreGState()
                UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
                pinbg.fill()
                context.restoreGState()
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 7.38, y: 1.94))
                shape.addLine(to: CGPoint(x: 0.64, y: 0.02))
                shape.addCurve(to: CGPoint(x: 0.02, y: 0.64), controlPoint1: CGPoint(x: 0.26, y: -0.08), controlPoint2: CGPoint(x: -0.08, y: 0.26))
                shape.addLine(to: CGPoint(x: 1.94, y: 7.38))
                shape.addCurve(to: CGPoint(x: 2.86, y: 7.43), controlPoint1: CGPoint(x: 2.09, y: 7.81), controlPoint2: CGPoint(x: 2.66, y: 7.86))
                shape.addLine(to: CGPoint(x: 4.2, y: 4.25))
                shape.addLine(to: CGPoint(x: 7.38, y: 2.9))
                shape.addCurve(to: CGPoint(x: 7.38, y: 1.94), controlPoint1: CGPoint(x: 7.86, y: 2.66), controlPoint2: CGPoint(x: 7.81, y: 2.09))
                shape.close()
                shape.move(to: CGPoint(x: 7.38, y: 1.94))
                context.saveGState()
                context.translateBy(x: 9.37, y: 9.7)
                context.rotate(by: 510 * CGFloat.pi/180)
                context.translateBy(x: -3.86, y: -3.86)
                UIColor.white.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// pin copy 2
            do {
                context.saveGState()
                context.translateBy(x: 229.31, y: 203.54)
                
                /// pin-bg
                let pinbg2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 20.61, height: 20.61))
                context.saveGState()
                context.translateBy(x: -0, y: -0)
                context.saveGState()
                context.beginPath()
                context.addPath(pinbg2.cgPath)
                context.addRect(pinbg2.bounds.insetBy(dx: -11, dy: -17))
                context.clip(using: .evenOdd)
                context.translateBy(x: -32.61, y: 0)
                do {
                    let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                    let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                    let baseOffset = context.convertToDeviceSpace(CGPoint(x: 32.61, y: 6)).applying(baseTransform)
                    let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                    let shadowBlur: CGFloat = 11 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                    context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.2).cgColor)
                }
                UIColor.black.setFill()
                pinbg2.fill()
                context.restoreGState()
                UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setFill()
                pinbg2.fill()
                context.restoreGState()
                
                /// pin-white
                let pinwhite = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 9.16, height: 9.16))
                context.saveGState()
                context.translateBy(x: 5.73, y: 5.73)
                UIColor.white.setFill()
                pinwhite.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// location-32px-glyph_pin-add
        do {
            context.saveGState()
            context.translateBy(x: 347.19, y: 546.24)
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 12.04, y: 0))
            shape2.addCurve(to: CGPoint(x: 0, y: 12.17), controlPoint1: CGPoint(x: 6.12, y: 0), controlPoint2: CGPoint(x: 0, y: 4.56))
            shape2.addCurve(to: CGPoint(x: 11.34, y: 31.14), controlPoint1: CGPoint(x: 0, y: 19.37), controlPoint2: CGPoint(x: 10.84, y: 30.63))
            shape2.addCurve(to: CGPoint(x: 12.04, y: 31.44), controlPoint1: CGPoint(x: 11.54, y: 31.34), controlPoint2: CGPoint(x: 11.74, y: 31.44))
            shape2.addCurve(to: CGPoint(x: 12.75, y: 31.14), controlPoint1: CGPoint(x: 12.35, y: 31.44), controlPoint2: CGPoint(x: 12.55, y: 31.34))
            shape2.addCurve(to: CGPoint(x: 24.09, y: 12.17), controlPoint1: CGPoint(x: 13.25, y: 30.63), controlPoint2: CGPoint(x: 24.09, y: 19.47))
            shape2.addCurve(to: CGPoint(x: 12.04, y: 0), controlPoint1: CGPoint(x: 24.09, y: 4.56), controlPoint2: CGPoint(x: 17.97, y: 0))
            shape2.close()
            shape2.move(to: CGPoint(x: 16.06, y: 13.18))
            shape2.addLine(to: CGPoint(x: 13.05, y: 13.18))
            shape2.addLine(to: CGPoint(x: 13.05, y: 16.23))
            shape2.addCurve(to: CGPoint(x: 12.04, y: 17.24), controlPoint1: CGPoint(x: 13.05, y: 16.84), controlPoint2: CGPoint(x: 12.65, y: 17.24))
            shape2.addCurve(to: CGPoint(x: 11.04, y: 16.23), controlPoint1: CGPoint(x: 11.44, y: 17.24), controlPoint2: CGPoint(x: 11.04, y: 16.84))
            shape2.addLine(to: CGPoint(x: 11.04, y: 13.18))
            shape2.addLine(to: CGPoint(x: 8.03, y: 13.18))
            shape2.addCurve(to: CGPoint(x: 7.03, y: 12.17), controlPoint1: CGPoint(x: 7.43, y: 13.18), controlPoint2: CGPoint(x: 7.03, y: 12.78))
            shape2.addCurve(to: CGPoint(x: 8.03, y: 11.16), controlPoint1: CGPoint(x: 7.03, y: 11.56), controlPoint2: CGPoint(x: 7.43, y: 11.16))
            shape2.addLine(to: CGPoint(x: 11.04, y: 11.16))
            shape2.addLine(to: CGPoint(x: 11.04, y: 8.11))
            shape2.addCurve(to: CGPoint(x: 12.04, y: 7.1), controlPoint1: CGPoint(x: 11.04, y: 7.51), controlPoint2: CGPoint(x: 11.44, y: 7.1))
            shape2.addCurve(to: CGPoint(x: 13.05, y: 8.11), controlPoint1: CGPoint(x: 12.65, y: 7.1), controlPoint2: CGPoint(x: 13.05, y: 7.51))
            shape2.addLine(to: CGPoint(x: 13.05, y: 11.16))
            shape2.addLine(to: CGPoint(x: 16.06, y: 11.16))
            shape2.addCurve(to: CGPoint(x: 17.06, y: 12.17), controlPoint1: CGPoint(x: 16.66, y: 11.16), controlPoint2: CGPoint(x: 17.06, y: 11.56))
            shape2.addCurve(to: CGPoint(x: 16.06, y: 13.18), controlPoint1: CGPoint(x: 17.06, y: 12.78), controlPoint2: CGPoint(x: 16.66, y: 13.18))
            shape2.close()
            shape2.move(to: CGPoint(x: 16.06, y: 13.18))
            context.saveGState()
            context.translateBy(x: 0, y: -0)
            UIColor.white.setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: 4, y: 0)
            
            /// gradient
            let gradient = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422, height: 104))
            context.saveGState()
            context.saveGState()
            gradient.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor.white.cgColor,
                        UIColor(white: 1, alpha: 0).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 211, y: 0),
                end: CGPoint(x: 211, y: 104),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// gradient copy
            let gradientCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422, height: 50.84))
            context.saveGState()
            context.translateBy(x: 0, y: 23.11)
            context.restoreGState()
            
            /// Time Arrival
            let timeArrival = NSMutableAttributedString(string: "Time Arrival")
            timeArrival.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText-Bold", size: 36)!, range: NSRange(location: 0, length: timeArrival.length))
            timeArrival.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: timeArrival.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                timeArrival.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: timeArrival.length))
            }
            context.saveGState()
            timeArrival.draw(in: CGRect(x: 55, y: 34.67, width: 300, height: 18))
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 22.51, y: 39.29)
                
                /// arrows-24px-outline-4_contrast
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape3 = UIBezierPath()
                    shape3.move(to: CGPoint(x: 16.88, y: 1.16))
                    shape3.addLine(to: CGPoint(x: 0, y: 1.16))
                    context.saveGState()
                    context.translateBy(x: 0, y: 7.22)
                    shape3.lineJoinStyle = .round
                    shape3.lineCapStyle = .round
                    shape3.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shape3.stroke()
                    context.restoreGState()
                    
                    /// Shape Copy 2
                    let shapeCopy2 = UIBezierPath()
                    shapeCopy2.move(to: CGPoint(x: 16.88, y: 1.16))
                    shapeCopy2.addLine(to: CGPoint(x: 0, y: 1.16))
                    context.saveGState()
                    context.translateBy(x: 0, y: 14.16)
                    shapeCopy2.lineJoinStyle = .round
                    shapeCopy2.lineCapStyle = .round
                    shapeCopy2.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shapeCopy2.stroke()
                    context.restoreGState()
                    
                    /// Shape Copy
                    let shapeCopy = UIBezierPath()
                    shapeCopy.move(to: CGPoint(x: 16.88, y: 1.16))
                    shapeCopy.addLine(to: CGPoint(x: 0, y: 1.16))
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.29)
                    shapeCopy.lineJoinStyle = .round
                    shapeCopy.lineCapStyle = .round
                    shapeCopy.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shapeCopy.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// ui-16px-3_funnel-40
            do {
                context.saveGState()
                context.translateBy(x: 382.61, y: 39.29)
                
                /// Shape
                let shape4 = UIBezierPath()
                shape4.move(to: CGPoint(x: 16.77, y: 0.6))
                shape4.addCurve(to: CGPoint(x: 15.82, y: 0), controlPoint1: CGPoint(x: 16.59, y: 0.23), controlPoint2: CGPoint(x: 16.22, y: 0))
                shape4.addLine(to: CGPoint(x: 1.05, y: 0))
                shape4.addCurve(to: CGPoint(x: 0.11, y: 0.6), controlPoint1: CGPoint(x: 0.65, y: 0), controlPoint2: CGPoint(x: 0.29, y: 0.23))
                shape4.addCurve(to: CGPoint(x: 0.21, y: 1.73), controlPoint1: CGPoint(x: -0.07, y: 0.97), controlPoint2: CGPoint(x: -0.03, y: 1.41))
                shape4.addLine(to: CGPoint(x: 6.33, y: 10.11))
                shape4.addLine(to: CGPoint(x: 6.33, y: 16.25))
                shape4.addCurve(to: CGPoint(x: 7.38, y: 17.33), controlPoint1: CGPoint(x: 6.33, y: 16.85), controlPoint2: CGPoint(x: 6.8, y: 17.33))
                shape4.addLine(to: CGPoint(x: 9.49, y: 17.33))
                shape4.addCurve(to: CGPoint(x: 10.55, y: 16.25), controlPoint1: CGPoint(x: 10.08, y: 17.33), controlPoint2: CGPoint(x: 10.55, y: 16.85))
                shape4.addLine(to: CGPoint(x: 10.55, y: 10.11))
                shape4.addLine(to: CGPoint(x: 16.67, y: 1.73))
                shape4.addCurve(to: CGPoint(x: 16.77, y: 0.6), controlPoint1: CGPoint(x: 16.91, y: 1.41), controlPoint2: CGPoint(x: 16.95, y: 0.97))
                shape4.close()
                shape4.move(to: CGPoint(x: 16.77, y: 0.6))
                context.saveGState()
                context.translateBy(x: 0, y: 0)
                UIColor(white: 0.267, alpha: 1).setFill()
                shape4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// 00:14
        let _0014 = NSMutableAttributedString(string: "00:14")
        _0014.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText-Bold", size: 36)!, range: NSRange(location: 0, length: _0014.length))
        _0014.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: _0014.length))
        do {
            let paragraphStyle = NSMutableParagraphStyle()
            paragraphStyle.alignment = .center
            _0014.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _0014.length))
        }
        context.saveGState()
        _0014.draw(at: CGPoint(x: 154, y: 61))
        context.restoreGState()
        /// Avatar
        let avatar = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 81, height: 81))
        context.saveGState()
        context.translateBy(x: 319, y: 647)
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        avatar.lineWidth = 2
        UIColor.white.setStroke()
        avatar.stroke()
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawConfirmation(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// 03 copy
        // Warning: Image layers are not supported.
        /// blurr copy
        let blurrCopy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 422, height: 1282), cornerRadius: 2)
        context.saveGState()
        // Warning: Blur effects are not supported.
        context.restoreGState()
        /// Rectangle 4
        let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 345, height: 551))
        context.saveGState()
        context.translateBy(x: 40, y: 102)
        UIColor(hue: 0.496, saturation: 0.765, brightness: 0.384, alpha: 0.7).setFill()
        rectangle4.fill()
        context.saveGState()
        rectangle4.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle4.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Rectangle
        let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 232, height: 41), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 91, y: 553)
        UIColor(hue: 0.497, saturation: 0.473, brightness: 0.812, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Confirm
        let confirm = NSMutableAttributedString(string: "Confirm")
        confirm.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 24)!, range: NSRange(location: 0, length: confirm.length))
        confirm.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: confirm.length))
        confirm.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: confirm.length))
        context.saveGState()
        confirm.draw(at: CGPoint(x: 161, y: 557))
        context.restoreGState()
        /// 00:17 minutes
        let _0017Minutes = NSMutableAttributedString(string: "00:17 minutes")
        _0017Minutes.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 20)!, range: NSRange(location: 0, length: _0017Minutes.length))
        _0017Minutes.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _0017Minutes.length))
        _0017Minutes.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: _0017Minutes.length))
        context.saveGState()
        _0017Minutes.draw(at: CGPoint(x: 144, y: 283))
        context.restoreGState()
        /// Rate:
        let rate = NSMutableAttributedString(string: "Rate:")
        rate.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 24)!, range: NSRange(location: 0, length: rate.length))
        rate.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: rate.length))
        rate.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: rate.length))
        context.saveGState()
        rate.draw(at: CGPoint(x: 115, y: 368))
        context.restoreGState()
        /// Rate:
        let rate6 = NSMutableAttributedString(string: "Rate:")
        rate6.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 24)!, range: NSRange(location: 0, length: rate6.length))
        rate6.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: rate6.length))
        rate6.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: rate6.length))
        context.saveGState()
        rate6.draw(at: CGPoint(x: 115, y: 368))
        context.restoreGState()
        /// Estimated Time:
        let estimatedTime = NSMutableAttributedString(string: "Estimated Time:")
        estimatedTime.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 24)!, range: NSRange(location: 0, length: estimatedTime.length))
        estimatedTime.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: estimatedTime.length))
        estimatedTime.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: estimatedTime.length))
        context.saveGState()
        estimatedTime.draw(at: CGPoint(x: 115, y: 255))
        context.restoreGState()
        /// Confirmation
        let confirmation2 = NSMutableAttributedString(string: "Confirmation")
        confirmation2.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 36)!, range: NSRange(location: 0, length: confirmation2.length))
        confirmation2.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: confirmation2.length))
        confirmation2.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: confirmation2.length))
        context.saveGState()
        confirmation2.draw(at: CGPoint(x: 95, y: 132))
        context.restoreGState()
        /// $15/hr min 3 hour pe
        let _15hrMin3HourPe = NSMutableAttributedString(string: "$15/hr\n\nmin 3 hour per \nrequest")
        _15hrMin3HourPe.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 20)!, range: NSRange(location: 0, length: 7))
        _15hrMin3HourPe.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 20)!, range: NSRange(location: 7, length: 24))
        _15hrMin3HourPe.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: _15hrMin3HourPe.length))
        _15hrMin3HourPe.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: _15hrMin3HourPe.length))
        context.saveGState()
        _15hrMin3HourPe.draw(at: CGPoint(x: 144, y: 396))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawLaborProfile(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 414, resizedFrame.height / 736)
        
        /// 03 copy
        // Warning: Image layers are not supported.
        /// blurr copy
        let blurrCopy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 422, height: 1282), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: -8, y: -29)
        // Warning: Blur effects are not supported.
        context.restoreGState()
        /// Rectangle 4
        let rectangle4 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 345, height: 551))
        context.saveGState()
        context.translateBy(x: 32, y: 73)
        UIColor(hue: 0.496, saturation: 0.765, brightness: 0.384, alpha: 0.7).setFill()
        rectangle4.fill()
        context.saveGState()
        rectangle4.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle4.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle4.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Masonry
        do {
            context.saveGState()
            context.translateBy(x: 52, y: 383)
            
            /// Spot-Narrow-#2
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 5 * resizedShadowScale),
                blur: 12 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.1).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 160.03, y: 0)
                
                /// img
                let img = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 149.86, height: 71.29), cornerRadius: 2)
                context.saveGState()
                context.saveGState()
                // Warning: Image fill is not supported.
                context.restoreGState()
                context.restoreGState()
                
                /// bg
                let bg = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 149.86, height: 44.91))
                context.saveGState()
                context.translateBy(x: 0, y: 71.29)
                UIColor.white.setFill()
                bg.fill()
                context.restoreGState()
                
                /// Cement Block Move
                let cementBlockMove = NSMutableAttributedString(string: "Cement Block Move")
                cementBlockMove.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 11)!, range: NSRange(location: 0, length: cementBlockMove.length))
                cementBlockMove.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: cementBlockMove.length))
                cementBlockMove.addAttribute(NSKernAttributeName, value: -0.1, range: NSRange(location: 0, length: cementBlockMove.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 21
                    paragraphStyle.minimumLineHeight = 21
                    cementBlockMove.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: cementBlockMove.length))
                }
                context.saveGState()
                cementBlockMove.draw(in: CGRect(x: 12.95, y: 79.41, width: 123.96, height: 24))
                context.restoreGState()
                
                /// rating
                do {
                    context.saveGState()
                    context.translateBy(x: 39, y: 100)
                    
                    /// 4.2/5.0
                    let _4250 = NSMutableAttributedString(string: "4.2/5.0")
                    _4250.addAttribute(NSFontAttributeName, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: _4250.length))
                    _4250.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.094, brightness: 0.661, alpha: 1), range: NSRange(location: 0, length: _4250.length))
                    _4250.addAttribute(NSKernAttributeName, value: 1, range: NSRange(location: 0, length: _4250.length))
                    do {
                        let paragraphStyle = NSMutableParagraphStyle()
                        paragraphStyle.maximumLineHeight = 10
                        paragraphStyle.minimumLineHeight = 10
                        _4250.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _4250.length))
                    }
                    context.saveGState()
                    _4250.draw(in: CGRect(x: 65.59, y: 0.15, width: 45.09, height: 11))
                    context.restoreGState()
                    
                    /// Oval 2 Copy 3
                    let oval2Copy3 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.82)
                    UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                    oval2Copy3.fill()
                    context.restoreGState()
                    
                    /// Oval 2 Copy 4
                    let oval2Copy4 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                    context.saveGState()
                    context.translateBy(x: 12.3, y: 0.82)
                    UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                    oval2Copy4.fill()
                    context.restoreGState()
                    
                    /// Oval 2 Copy 5
                    let oval2Copy5 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                    context.saveGState()
                    context.translateBy(x: 24.6, y: 0.82)
                    UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                    oval2Copy5.fill()
                    context.restoreGState()
                    
                    /// Oval 2 Copy 6
                    let oval2Copy6 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                    context.saveGState()
                    context.translateBy(x: 36.89, y: 0.82)
                    UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                    oval2Copy6.fill()
                    context.restoreGState()
                    
                    /// Oval 2 Copy 7
                    let oval2Copy7 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                    context.saveGState()
                    context.translateBy(x: 49.19, y: 0.82)
                    UIColor(hue: 0.685, saturation: 0.042, brightness: 0.887, alpha: 1).setFill()
                    oval2Copy7.fill()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// Spot-Narrow-#1
            context.saveGState()
            context.setShadow(
                offset: CGSize(width: 0 * resizedShadowScale, height: 5 * resizedShadowScale),
                blur: 12 * resizedShadowScale,
                color: UIColor(white: 0, alpha: 0.1).cgColor)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 0, y: 1)
                
                /// jerry-kiesewetter-206413
                // Warning: Image layers are not supported.
                
                /// bg
                let bg2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 149.86, height: 33.34))
                context.saveGState()
                context.translateBy(x: 0, y: 83.67)
                UIColor.white.setFill()
                bg2.fill()
                context.restoreGState()
                
                /// Bin Sorting
                let binSorting = NSMutableAttributedString(string: "Bin Sorting")
                binSorting.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 12)!, range: NSRange(location: 0, length: binSorting.length))
                binSorting.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: binSorting.length))
                binSorting.addAttribute(NSKernAttributeName, value: -0.1, range: NSRange(location: 0, length: binSorting.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 21
                    paragraphStyle.minimumLineHeight = 21
                    binSorting.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: binSorting.length))
                }
                context.saveGState()
                binSorting.draw(in: CGRect(x: 13, y: 80, width: 123.96, height: 24))
                context.restoreGState()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// rating
            do {
                context.saveGState()
                context.translateBy(x: 39, y: 100)
                
                /// 4.2/5.0
                let _63 = NSMutableAttributedString(string: "4.2/5.0")
                _63.addAttribute(NSFontAttributeName, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: _63.length))
                _63.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.094, brightness: 0.661, alpha: 1), range: NSRange(location: 0, length: _63.length))
                _63.addAttribute(NSKernAttributeName, value: 1, range: NSRange(location: 0, length: _63.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 10
                    paragraphStyle.minimumLineHeight = 10
                    _63.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _63.length))
                }
                context.saveGState()
                _63.draw(in: CGRect(x: 65.59, y: 0.15, width: 45.09, height: 11))
                context.restoreGState()
                
                /// Oval 2 Copy 3
                let oval2Copy10 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                context.saveGState()
                context.translateBy(x: 0, y: 0.82)
                UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                oval2Copy10.fill()
                context.restoreGState()
                
                /// Oval 2 Copy 4
                let oval2Copy11 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                context.saveGState()
                context.translateBy(x: 12.3, y: 0.82)
                UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                oval2Copy11.fill()
                context.restoreGState()
                
                /// Oval 2 Copy 5
                let oval2Copy12 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                context.saveGState()
                context.translateBy(x: 24.6, y: 0.82)
                UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                oval2Copy12.fill()
                context.restoreGState()
                
                /// Oval 2 Copy 6
                let oval2Copy13 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                context.saveGState()
                context.translateBy(x: 36.89, y: 0.82)
                UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                oval2Copy13.fill()
                context.restoreGState()
                
                /// Oval 2 Copy 7
                let oval2Copy14 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 8.2, height: 6.55))
                context.saveGState()
                context.translateBy(x: 49.19, y: 0.82)
                UIColor(hue: 0.685, saturation: 0.042, brightness: 0.887, alpha: 1).setFill()
                oval2Copy14.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// btn-silent
            do {
                context.saveGState()
                context.translateBy(x: 53.65, y: 635.16)
                
                /// Rectangle 3
                let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 203.51, height: 29.94), cornerRadius: 100)
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                rectangle3.lineWidth = 1
                UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setStroke()
                rectangle3.stroke()
                context.restoreGState()
                
                /// Load more
                let loadMore = NSMutableAttributedString(string: "Load more")
                loadMore.addAttribute(NSFontAttributeName, value: UIFont(name: ".AppleSystemUIFont", size: 11)!, range: NSRange(location: 0, length: loadMore.length))
                loadMore.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1), range: NSRange(location: 0, length: loadMore.length))
                loadMore.addAttribute(NSKernAttributeName, value: 1.1, range: NSRange(location: 0, length: loadMore.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.alignment = .center
                    paragraphStyle.maximumLineHeight = 11
                    paragraphStyle.minimumLineHeight = 11
                    loadMore.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: loadMore.length))
                }
                context.saveGState()
                loadMore.draw(in: CGRect(x: 65.22, y: 8.72, width: 73.08, height: 13))
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// vladimir-chuchadeev-116176
        // Warning: Image layers are not supported.
        /// bg
        let bg3 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 149.86, height: 11))
        context.saveGState()
        context.translateBy(x: 53, y: 612)
        UIColor.white.setFill()
        bg3.fill()
        context.restoreGState()
        /// alex-st-john-252497
        // Warning: Image layers are not supported.
        /// Rectangle Copy 2
        let rectangleCopy2 = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 345, height: 294))
        context.saveGState()
        context.translateBy(x: 31, y: 73)
        context.saveGState()
        context.beginPath()
        context.addPath(rectangleCopy2.cgPath)
        context.addRect(rectangleCopy2.bounds.insetBy(dx: 0, dy: -1))
        context.clip(using: .evenOdd)
        context.translateBy(x: -346, y: 0)
        do {
            let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
            let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
            let baseOffset = context.convertToDeviceSpace(CGPoint(x: 346, y: 1)).applying(baseTransform)
            let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
            let shadowBlur: CGFloat = 0 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
            context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(hue: 0.685, saturation: 0.042, brightness: 0.887, alpha: 1).cgColor)
        }
        UIColor.black.setFill()
        rectangleCopy2.fill()
        context.restoreGState()
        UIColor.white.setFill()
        rectangleCopy2.fill()
        context.restoreGState()
        /// Reviews
        let reviews = NSMutableAttributedString(string: "Reviews")
        reviews.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText-Bold", size: 20)!, range: NSRange(location: 0, length: reviews.length))
        reviews.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.492, saturation: 0.735, brightness: 0.314, alpha: 1), range: NSRange(location: 0, length: reviews.length))
        reviews.addAttribute(NSKernAttributeName, value: -0.1, range: NSRange(location: 0, length: reviews.length))
        context.saveGState()
        reviews.draw(at: CGPoint(x: 167, y: 335))
        context.restoreGState()
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Overrides/Icons/Icon 1
        // Warning: New symbols are not supported.
        /// Rating Chart
        let ratingChart = NSMutableAttributedString(string: "Rating Chart")
        ratingChart.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSDisplay", size: 13)!, range: NSRange(location: 0, length: ratingChart.length))
        ratingChart.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: ratingChart.length))
        context.saveGState()
        ratingChart.draw(at: CGPoint(x: 143, y: 225))
        context.restoreGState()
        /// stats
        do {
            context.saveGState()
            context.translateBy(x: 52, y: 241)
            
            /// Checkin
            do {
                context.saveGState()
                context.translateBy(x: 0, y: 6)
                
                /// 12
                let _12 = NSMutableAttributedString(string: "12")
                _12.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSDisplay", size: 36)!, range: NSRange(location: 0, length: _12.length))
                _12.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: _12.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 36
                    paragraphStyle.minimumLineHeight = 36
                    _12.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: _12.length))
                }
                context.saveGState()
                _12.draw(at: CGPoint(x: 0, y: 19))
                context.restoreGState()
                
                /// Jobs
                let jobs = NSMutableAttributedString(string: "Jobs")
                jobs.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 11)!, range: NSRange(location: 0, length: jobs.length))
                jobs.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.094, brightness: 0.661, alpha: 1), range: NSRange(location: 0, length: jobs.length))
                jobs.addAttribute(NSKernAttributeName, value: 0.6, range: NSRange(location: 0, length: jobs.length))
                do {
                    let paragraphStyle = NSMutableParagraphStyle()
                    paragraphStyle.maximumLineHeight = 16
                    paragraphStyle.minimumLineHeight = 16
                    jobs.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: jobs.length))
                }
                context.saveGState()
                jobs.draw(at: CGPoint.zero)
                context.restoreGState()
                
                context.restoreGState()
            }
            
            /// Group 2
            do {
                context.saveGState()
                context.translateBy(x: 88, y: 0)
                
                /// CHART
                do {
                    context.saveGState()
                    
                    /// Group 6
                    do {
                        context.saveGState()
                        
                        /// location-line
                        let locationline = UIBezierPath()
                        locationline.move(to: CGPoint(x: 0, y: 0))
                        locationline.addCurve(to: CGPoint(x: 48.48, y: 18.85), controlPoint1: CGPoint(x: 14.33, y: -0.23), controlPoint2: CGPoint(x: 26.46, y: 53.39))
                        locationline.addCurve(to: CGPoint(x: 84.11, y: 48.34), controlPoint1: CGPoint(x: 70.5, y: -15.68), controlPoint2: CGPoint(x: 76.43, y: 48.22))
                        locationline.addCurve(to: CGPoint(x: 105.77, y: 29.8), controlPoint1: CGPoint(x: 91.79, y: 48.45), controlPoint2: CGPoint(x: 95.25, y: 27.19))
                        locationline.addCurve(to: CGPoint(x: 131.72, y: 12.84), controlPoint1: CGPoint(x: 116.3, y: 32.4), controlPoint2: CGPoint(x: 119.36, y: -0.6))
                        locationline.addCurve(to: CGPoint(x: 168.17, y: 0.11), controlPoint1: CGPoint(x: 144.09, y: 26.28), controlPoint2: CGPoint(x: 144.96, y: -0.04))
                        context.saveGState()
                        context.setBlendMode(.multiply)
                        context.beginTransparencyLayer(auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: 0, y: 20.16)
                            locationline.lineJoinStyle = .round
                            locationline.lineCapStyle = .round
                            context.saveGState()
                            locationline.lineWidth = 3
                            context.beginPath()
                            context.addPath(locationline.cgPath)
                            context.setLineWidth(locationline.lineWidth)
                            context.setLineCap(locationline.lineCapStyle)
                            context.setLineJoin(locationline.lineJoinStyle)
                            context.setMiterLimit(locationline.miterLimit)
                            context.replacePathWithStrokedPath()
                            context.clip()
                            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                                        UIColor(hue: 0.463, saturation: 1, brightness: 0.792, alpha: 1).cgColor,
                                        UIColor(hue: 0.178, saturation: 0.168, brightness: 1, alpha: 1).cgColor,
                                    ] as CFArray, locations: [0, 1])!,
                                start: CGPoint(x: 197.89, y: -8.3),
                                end: CGPoint(x: -15.8, y: 51.82),
                                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
                            context.restoreGState()
                        }
                        context.endTransparencyLayer()
                        context.restoreGState()
                        
                        /// Oval Copy 2
                        let ovalCopy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 38.16, height: 39.44))
                        context.saveGState()
                        context.setAlpha(0.2)
                        context.beginTransparencyLayer(auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: 152.51, y: 0.88)
                            ovalCopy2.lineWidth = 1
                            UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setStroke()
                            ovalCopy2.stroke()
                        }
                        context.endTransparencyLayer()
                        context.restoreGState()
                        
                        /// Oval Copy
                        let ovalCopy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 19.05, height: 19.69))
                        context.saveGState()
                        context.setAlpha(0.5)
                        context.beginTransparencyLayer(auxiliaryInfo: nil)
                        do {
                            context.translateBy(x: 162.06, y: 10.75)
                            ovalCopy.lineWidth = 1
                            UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setStroke()
                            ovalCopy.stroke()
                        }
                        context.endTransparencyLayer()
                        context.restoreGState()
                        
                        /// Oval
                        let oval = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 10.83, height: 11.19))
                        context.saveGState()
                        context.translateBy(x: 166.17, y: 15)
                        UIColor(hue: 0.463, saturation: 1, brightness: 0.794, alpha: 1).setFill()
                        oval.fill()
                        oval.lineWidth = 2
                        UIColor.white.setStroke()
                        oval.stroke()
                        context.restoreGState()
                        
                        context.restoreGState()
                    }
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// Avatar
        let avatar = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 81, height: 81))
        context.saveGState()
        context.translateBy(x: 54, y: 104)
        context.saveGState()
        // Warning: Image fill is not supported.
        context.restoreGState()
        avatar.lineWidth = 2
        UIColor.white.setStroke()
        avatar.stroke()
        context.restoreGState()
        /// John Doe
        let johnDoe = NSMutableAttributedString(string: "John Doe")
        johnDoe.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 36)!, range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.496, saturation: 0.591, brightness: 0.518, alpha: 1), range: NSRange(location: 0, length: johnDoe.length))
        johnDoe.addAttribute(NSKernAttributeName, value: -0.08, range: NSRange(location: 0, length: johnDoe.length))
        context.saveGState()
        johnDoe.draw(at: CGPoint(x: 155, y: 120))
        context.restoreGState()
        
        context.restoreGState()
    }
    
    class func drawUserMain(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 414, height: 736), resizing: ResizingBehavior = .aspectFit) {
        /// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        let baseTransform = context.userSpaceToDeviceSpaceTransform.inverted()
        
        /// Resize to Target Frame
        context.saveGState()
        let resizedFrame = resizing.apply(rect: CGRect(x: 0, y: 0, width: 414, height: 736), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 414, y: resizedFrame.height / 736)
        
        /// 03
        // Warning: Image layers are not supported.
        /// 03 copy
        // Warning: Image layers are not supported.
        /// blurr
        let blurr = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 422, height: 1282), cornerRadius: 2)
        context.saveGState()
        context.translateBy(x: -8, y: 4)
        // Warning: Blur effects are not supported.
        context.restoreGState()
        /// Screenshot 2017-06-03 15.25.29
        // Warning: Image layers are not supported.
        /// Rectangle
        let rectangle = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 187, height: 53), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 44, y: 645)
        UIColor(hue: 0.496, saturation: 0.765, brightness: 0.384, alpha: 1).setFill()
        rectangle.fill()
        context.saveGState()
        rectangle.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Request
        let request = NSMutableAttributedString(string: "Request")
        request.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 24)!, range: NSRange(location: 0, length: request.length))
        request.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: request.length))
        context.saveGState()
        request.draw(at: CGPoint(x: 65, y: 655))
        context.restoreGState()
        /// $15/HR
        let _15HR = NSMutableAttributedString(string: "$15/HR")
        _15HR.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 14)!, range: NSRange(location: 0, length: _15HR.length))
        _15HR.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.493, saturation: 0.264, brightness: 0.882, alpha: 1), range: NSRange(location: 0, length: _15HR.length))
        context.saveGState()
        _15HR.draw(at: CGPoint(x: 170, y: 655))
        context.restoreGState()
        /// addspot-action
        do {
            context.saveGState()
            context.translateBy(x: 339, y: 546)
            
            /// location-32px-glyph_pin-add
            do {
                context.saveGState()
                context.translateBy(x: 0.19, y: 0.24)
                
                /// Shape
                let shape = UIBezierPath()
                shape.move(to: CGPoint(x: 12.04, y: 0))
                shape.addCurve(to: CGPoint(x: 0, y: 12.17), controlPoint1: CGPoint(x: 6.12, y: 0), controlPoint2: CGPoint(x: 0, y: 4.56))
                shape.addCurve(to: CGPoint(x: 11.34, y: 31.14), controlPoint1: CGPoint(x: 0, y: 19.37), controlPoint2: CGPoint(x: 10.84, y: 30.63))
                shape.addCurve(to: CGPoint(x: 12.04, y: 31.44), controlPoint1: CGPoint(x: 11.54, y: 31.34), controlPoint2: CGPoint(x: 11.74, y: 31.44))
                shape.addCurve(to: CGPoint(x: 12.75, y: 31.14), controlPoint1: CGPoint(x: 12.35, y: 31.44), controlPoint2: CGPoint(x: 12.55, y: 31.34))
                shape.addCurve(to: CGPoint(x: 24.09, y: 12.17), controlPoint1: CGPoint(x: 13.25, y: 30.63), controlPoint2: CGPoint(x: 24.09, y: 19.47))
                shape.addCurve(to: CGPoint(x: 12.04, y: 0), controlPoint1: CGPoint(x: 24.09, y: 4.56), controlPoint2: CGPoint(x: 17.97, y: 0))
                shape.close()
                shape.move(to: CGPoint(x: 16.06, y: 13.18))
                shape.addLine(to: CGPoint(x: 13.05, y: 13.18))
                shape.addLine(to: CGPoint(x: 13.05, y: 16.23))
                shape.addCurve(to: CGPoint(x: 12.04, y: 17.24), controlPoint1: CGPoint(x: 13.05, y: 16.84), controlPoint2: CGPoint(x: 12.65, y: 17.24))
                shape.addCurve(to: CGPoint(x: 11.04, y: 16.23), controlPoint1: CGPoint(x: 11.44, y: 17.24), controlPoint2: CGPoint(x: 11.04, y: 16.84))
                shape.addLine(to: CGPoint(x: 11.04, y: 13.18))
                shape.addLine(to: CGPoint(x: 8.03, y: 13.18))
                shape.addCurve(to: CGPoint(x: 7.03, y: 12.17), controlPoint1: CGPoint(x: 7.43, y: 13.18), controlPoint2: CGPoint(x: 7.03, y: 12.78))
                shape.addCurve(to: CGPoint(x: 8.03, y: 11.16), controlPoint1: CGPoint(x: 7.03, y: 11.56), controlPoint2: CGPoint(x: 7.43, y: 11.16))
                shape.addLine(to: CGPoint(x: 11.04, y: 11.16))
                shape.addLine(to: CGPoint(x: 11.04, y: 8.11))
                shape.addCurve(to: CGPoint(x: 12.04, y: 7.1), controlPoint1: CGPoint(x: 11.04, y: 7.51), controlPoint2: CGPoint(x: 11.44, y: 7.1))
                shape.addCurve(to: CGPoint(x: 13.05, y: 8.11), controlPoint1: CGPoint(x: 12.65, y: 7.1), controlPoint2: CGPoint(x: 13.05, y: 7.51))
                shape.addLine(to: CGPoint(x: 13.05, y: 11.16))
                shape.addLine(to: CGPoint(x: 16.06, y: 11.16))
                shape.addCurve(to: CGPoint(x: 17.06, y: 12.17), controlPoint1: CGPoint(x: 16.66, y: 11.16), controlPoint2: CGPoint(x: 17.06, y: 11.56))
                shape.addCurve(to: CGPoint(x: 16.06, y: 13.18), controlPoint1: CGPoint(x: 17.06, y: 12.78), controlPoint2: CGPoint(x: 16.66, y: 13.18))
                shape.close()
                shape.move(to: CGPoint(x: 16.06, y: 13.18))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                UIColor.white.setFill()
                shape.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        /// myself
        do {
            context.saveGState()
            context.translateBy(x: 75, y: 163)
            
            /// pin-bg copy 2
            let pinbgCopy2 = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 264, height: 264))
            context.saveGState()
            context.setAlpha(0.1)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
                pinbgCopy2.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// pin-bg copy
            let pinbgCopy = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 48.57, height: 48.57))
            context.saveGState()
            context.setAlpha(0.2)
            context.beginTransparencyLayer(auxiliaryInfo: nil)
            do {
                context.translateBy(x: 108.89, y: 108.89)
                UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
                pinbgCopy.fill()
            }
            context.endTransparencyLayer()
            context.restoreGState()
            
            /// pin-bg
            let pinbg = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 25.07, height: 25.07))
            context.saveGState()
            context.translateBy(x: 120.64, y: 119.86)
            context.saveGState()
            context.beginPath()
            context.addPath(pinbg.cgPath)
            context.addRect(pinbg.bounds.insetBy(dx: -10, dy: -18))
            context.clip(using: .evenOdd)
            context.translateBy(x: -36.07, y: 0)
            do {
                let baseZero = context.convertToDeviceSpace(CGPoint.zero).applying(baseTransform)
                let baseOne = context.convertToDeviceSpace(CGPoint(x: 1, y: 1)).applying(baseTransform)
                let baseOffset = context.convertToDeviceSpace(CGPoint(x: 36.07, y: 8)).applying(baseTransform)
                let shadowOffset = CGSize(width: baseOffset.x - baseZero.x, height: baseOffset.y - baseZero.y)
                let shadowBlur: CGFloat = 10 * min(baseOne.x - baseZero.x, baseOne.y - baseZero.y)
                context.setShadow(offset: shadowOffset, blur: shadowBlur, color: UIColor(white: 0, alpha: 0.23).cgColor)
            }
            UIColor.black.setFill()
            pinbg.fill()
            context.restoreGState()
            UIColor(hue: 0.104, saturation: 0.856, brightness: 0.962, alpha: 1).setFill()
            pinbg.fill()
            context.restoreGState()
            
            /// Shape
            let shape2 = UIBezierPath()
            shape2.move(to: CGPoint(x: 8.98, y: 2.36))
            shape2.addLine(to: CGPoint(x: 0.78, y: 0.02))
            shape2.addCurve(to: CGPoint(x: 0.02, y: 0.78), controlPoint1: CGPoint(x: 0.31, y: -0.1), controlPoint2: CGPoint(x: -0.1, y: 0.31))
            shape2.addLine(to: CGPoint(x: 2.36, y: 8.98))
            shape2.addCurve(to: CGPoint(x: 3.47, y: 9.03), controlPoint1: CGPoint(x: 2.54, y: 9.5), controlPoint2: CGPoint(x: 3.24, y: 9.56))
            shape2.addLine(to: CGPoint(x: 5.11, y: 5.17))
            shape2.addLine(to: CGPoint(x: 8.98, y: 3.53))
            shape2.addCurve(to: CGPoint(x: 8.98, y: 2.36), controlPoint1: CGPoint(x: 9.56, y: 3.24), controlPoint2: CGPoint(x: 9.5, y: 2.54))
            shape2.close()
            shape2.move(to: CGPoint(x: 8.98, y: 2.36))
            context.saveGState()
            context.translateBy(x: 128.47, y: 128.47)
            UIColor.white.setFill()
            shape2.fill()
            context.restoreGState()
            
            context.restoreGState()
        }
        /// Misc/Elements/Map Pin
        // Warning: New symbols are not supported.
        /// Misc/Elements/Map Pin Copy
        // Warning: New symbols are not supported.
        /// Misc/Elements/Map Pin Copy 3
        // Warning: New symbols are not supported.
        /// Misc/Elements/Map Pin Copy 4
        // Warning: New symbols are not supported.
        /// Rectangle Copy
        let rectangleCopy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 125, height: 53), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 246, y: 645)
        UIColor(hue: 0.496, saturation: 0.765, brightness: 0.384, alpha: 1).setFill()
        rectangleCopy.fill()
        context.saveGState()
        rectangleCopy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangleCopy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangleCopy.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Schedule
        let schedule = NSMutableAttributedString(string: "Schedule")
        schedule.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue-Bold", size: 20)!, range: NSRange(location: 0, length: schedule.length))
        schedule.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: schedule.length))
        context.saveGState()
        schedule.draw(at: CGPoint(x: 264, y: 659))
        context.restoreGState()
        /// Rectangle 3 Copy
        let rectangle3Copy = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 245, height: 25), cornerRadius: 8)
        context.saveGState()
        context.translateBy(x: 85, y: 603)
        UIColor(white: 0.847, alpha: 0.52).setFill()
        rectangle3Copy.fill()
        context.saveGState()
        rectangle3Copy.lineWidth = 2
        context.beginPath()
        context.addPath(rectangle3Copy.cgPath)
        context.clip(using: .evenOdd)
        UIColor(white: 0.592, alpha: 1).setStroke()
        rectangle3Copy.stroke()
        context.restoreGState()
        context.restoreGState()
        /// Small Description
        let smallDescription = NSMutableAttributedString(string: "Small Description")
        smallDescription.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: smallDescription.length))
        smallDescription.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: smallDescription.length))
        context.saveGState()
        smallDescription.draw(at: CGPoint(x: 98, y: 606))
        context.restoreGState()
        /// Header
        do {
            context.saveGState()
            context.translateBy(x: -4, y: 0)
            
            /// gradient
            let gradient = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422, height: 82))
            context.saveGState()
            context.saveGState()
            gradient.addClip()
            context.drawLinearGradient(CGGradient(colorsSpace: nil, colors: [
                        UIColor.white.cgColor,
                        UIColor(white: 1, alpha: 0).cgColor,
                    ] as CFArray, locations: [0, 1])!,
                start: CGPoint(x: 211, y: 0),
                end: CGPoint(x: 211, y: 82),
                options: [.drawsBeforeStartLocation, .drawsAfterEndLocation])
            context.restoreGState()
            context.restoreGState()
            
            /// gradient copy
            let gradientCopy = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 422, height: 40.09))
            context.saveGState()
            context.translateBy(x: 0, y: 18.22)
            context.restoreGState()
            
            /// Rectangle 3
            let rectangle3 = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 245, height: 25), cornerRadius: 8)
            context.saveGState()
            context.translateBy(x: 88, y: 73)
            UIColor(white: 0.847, alpha: 0.52).setFill()
            rectangle3.fill()
            context.saveGState()
            rectangle3.lineWidth = 2
            context.beginPath()
            context.addPath(rectangle3.cgPath)
            context.clip(using: .evenOdd)
            UIColor(white: 0.592, alpha: 1).setStroke()
            rectangle3.stroke()
            context.restoreGState()
            context.restoreGState()
            
            /// Alternate Address
            let alternateAddress = NSMutableAttributedString(string: "Alternate Address")
            alternateAddress.addAttribute(NSFontAttributeName, value: UIFont(name: "HelveticaNeue", size: 14)!, range: NSRange(location: 0, length: alternateAddress.length))
            alternateAddress.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.89, saturation: 0, brightness: 1, alpha: 1), range: NSRange(location: 0, length: alternateAddress.length))
            context.saveGState()
            alternateAddress.draw(at: CGPoint(x: 99, y: 76.12))
            context.restoreGState()
            
            /// Buzz Labor
            let buzzLabor = NSMutableAttributedString(string: "Buzz Labor\n\n")
            buzzLabor.addAttribute(NSFontAttributeName, value: UIFont(name: ".SFNSText", size: 16)!, range: NSRange(location: 0, length: buzzLabor.length))
            buzzLabor.addAttribute(NSForegroundColorAttributeName, value: UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1), range: NSRange(location: 0, length: buzzLabor.length))
            do {
                let paragraphStyle = NSMutableParagraphStyle()
                paragraphStyle.alignment = .center
                paragraphStyle.maximumLineHeight = 16
                paragraphStyle.minimumLineHeight = 16
                buzzLabor.addAttribute(NSParagraphStyleAttributeName, value: paragraphStyle, range: NSRange(location: 0, length: buzzLabor.length))
            }
            context.saveGState()
            buzzLabor.draw(in: CGRect(x: 150, y: 28, width: 120.26, height: 28))
            context.restoreGState()
            
            /// Group 4
            do {
                context.saveGState()
                context.translateBy(x: 22.51, y: 30.98)
                
                /// arrows-24px-outline-4_contrast
                do {
                    context.saveGState()
                    
                    /// Shape
                    let shape3 = UIBezierPath()
                    shape3.move(to: CGPoint(x: 16.88, y: 0.91))
                    shape3.addLine(to: CGPoint(x: 0, y: 0.91))
                    context.saveGState()
                    context.translateBy(x: 0, y: 5.69)
                    shape3.lineJoinStyle = .round
                    shape3.lineCapStyle = .round
                    shape3.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shape3.stroke()
                    context.restoreGState()
                    
                    /// Shape Copy 2
                    let shapeCopy2 = UIBezierPath()
                    shapeCopy2.move(to: CGPoint(x: 16.88, y: 0.91))
                    shapeCopy2.addLine(to: CGPoint(x: 0, y: 0.91))
                    context.saveGState()
                    context.translateBy(x: 0, y: 11.16)
                    shapeCopy2.lineJoinStyle = .round
                    shapeCopy2.lineCapStyle = .round
                    shapeCopy2.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shapeCopy2.stroke()
                    context.restoreGState()
                    
                    /// Shape Copy
                    let shapeCopy = UIBezierPath()
                    shapeCopy.move(to: CGPoint(x: 16.88, y: 0.91))
                    shapeCopy.addLine(to: CGPoint(x: 0, y: 0.91))
                    context.saveGState()
                    context.translateBy(x: 0, y: 0.23)
                    shapeCopy.lineJoinStyle = .round
                    shapeCopy.lineCapStyle = .round
                    shapeCopy.lineWidth = 2
                    UIColor(hue: 0.685, saturation: 0.148, brightness: 0.239, alpha: 1).setStroke()
                    shapeCopy.stroke()
                    context.restoreGState()
                    
                    context.restoreGState()
                }
                
                context.restoreGState()
            }
            
            /// ui-16px-3_funnel-40
            do {
                context.saveGState()
                context.translateBy(x: 382.61, y: 30.98)
                
                /// Shape
                let shape4 = UIBezierPath()
                shape4.move(to: CGPoint(x: 16.77, y: 0.47))
                shape4.addCurve(to: CGPoint(x: 15.82, y: 0), controlPoint1: CGPoint(x: 16.59, y: 0.18), controlPoint2: CGPoint(x: 16.22, y: 0))
                shape4.addLine(to: CGPoint(x: 1.05, y: 0))
                shape4.addCurve(to: CGPoint(x: 0.11, y: 0.47), controlPoint1: CGPoint(x: 0.65, y: 0), controlPoint2: CGPoint(x: 0.29, y: 0.18))
                shape4.addCurve(to: CGPoint(x: 0.21, y: 1.37), controlPoint1: CGPoint(x: -0.07, y: 0.76), controlPoint2: CGPoint(x: -0.03, y: 1.11))
                shape4.addLine(to: CGPoint(x: 6.33, y: 7.97))
                shape4.addLine(to: CGPoint(x: 6.33, y: 12.81))
                shape4.addCurve(to: CGPoint(x: 7.38, y: 13.67), controlPoint1: CGPoint(x: 6.33, y: 13.28), controlPoint2: CGPoint(x: 6.8, y: 13.67))
                shape4.addLine(to: CGPoint(x: 9.49, y: 13.67))
                shape4.addCurve(to: CGPoint(x: 10.55, y: 12.81), controlPoint1: CGPoint(x: 10.08, y: 13.67), controlPoint2: CGPoint(x: 10.55, y: 13.28))
                shape4.addLine(to: CGPoint(x: 10.55, y: 7.97))
                shape4.addLine(to: CGPoint(x: 16.67, y: 1.37))
                shape4.addCurve(to: CGPoint(x: 16.77, y: 0.47), controlPoint1: CGPoint(x: 16.91, y: 1.11), controlPoint2: CGPoint(x: 16.95, y: 0.76))
                shape4.close()
                shape4.move(to: CGPoint(x: 16.77, y: 0.47))
                context.saveGState()
                context.translateBy(x: 0, y: -0)
                UIColor(white: 0.267, alpha: 1).setFill()
                shape4.fill()
                context.restoreGState()
                
                context.restoreGState()
            }
            
            context.restoreGState()
        }
        
        context.restoreGState()
    }
    
    
    //MARK: - Canvas Images
    
    /// Buzz Labor Design Draft
    
    class func imageOfSigninsignUp2() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        UserStylingViewController.drawSigninsignUp2()
        image = UIImage(named: "backgroundImage")!
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfEnRoute() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        UserStylingViewController.drawEnRoute()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfConfirmation() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        UserStylingViewController.drawConfirmation()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfLaborProfile() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        UserStylingViewController.drawLaborProfile()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    class func imageOfUserMain() -> UIImage {
        struct LocalCache {
            static var image: UIImage!
        }
        if LocalCache.image != nil {
            return LocalCache.image
        }
        var image: UIImage
        
        UIGraphicsBeginImageContextWithOptions(CGSize(width: 414, height: 736), false, 0)
        UserStylingViewController.drawUserMain()
        image = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()
        
        LocalCache.image = image
        return image
    }
    
    
    //MARK: - Resizing Behavior
    
    enum ResizingBehavior {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.
        
        func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }
            
            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)
            
            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }
            
            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
    
    
}
